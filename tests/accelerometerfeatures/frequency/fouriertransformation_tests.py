from datetime import datetime
from unittest import TestCase

import pandas as pd

from accelerometerfeatures.frequency import fouriertransformation


class TestFourierTransformation(TestCase):
    def test01(self):
        """Idea: Sampling frequency should be 2 Hz and the input data should
        span 20 seconds. The window size is 9 entries, so 4.5 seconds (due to
        the 2 Hz frequency).

        Windows start in the interval of 0 - 15.0 --> 31 windows (second 20 is
        not included in the data so a window at 15.5 would go beyond the data)
        """
        frequency = 2  # Hz
        window_size = 9  # entries
        d = datetime
        data = pd.DataFrame([
                [0.233786601626025, d(2018, 12, 12, 10, 0, 0, 0)],
                [3.409165723372026, d(2018, 12, 12, 10, 0, 0, 200000)],
                [6.268553064538337, d(2018, 12, 12, 10, 0, 0, 512344)],
                [7.602477261931745, d(2018, 12, 12, 10, 0, 0, 654321)],
                [9.787878606529013, d(2018, 12, 12, 10, 0, 1, 0)],  # sec 1
                [8.410208406656857, d(2018, 12, 12, 10, 0, 1, 213455)],
                [3.990355668821168, d(2018, 12, 12, 10, 0, 1, 233455)],
                [3.773233503784786, d(2018, 12, 12, 10, 0, 1, 778901)],
                [5.714913485444301, d(2018, 12, 12, 10, 0, 2, 123456)],  # sec 2
                [5.237095585992316, d(2018, 12, 12, 10, 0, 2, 333334)],
                [5.237095585992316, d(2018, 12, 12, 10, 0, 2, 555555)],
                [1.110890279655918, d(2018, 12, 12, 10, 0, 2, 765456)],
                [6.774803540069895, d(2018, 12, 12, 10, 0, 2, 999999)],
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 250456)],  # sec 3
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 450456)],
                [5.109931127361341, d(2018, 12, 12, 10, 0, 3, 783456)],
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 12)],  # sec 4
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 128764)],
                [4.702826592756071, d(2018, 12, 12, 10, 0, 4, 513456)],
                [6.007462492855707, d(2018, 12, 12, 10, 0, 4, 813456)],
                [8.528199089231283, d(2018, 12, 12, 10, 0, 5, 56)],  # sec 5
                [2.909938006812772, d(2018, 12, 12, 10, 0, 5, 234562)],
                [1.890597993315889, d(2018, 12, 12, 10, 0, 5, 598298)],
                [0.145616139455065, d(2018, 12, 12, 10, 0, 5, 723456)],
                [5.130572049165245, d(2018, 12, 12, 10, 0, 6, 23)],  # sec 6
                [6.431000067620264, d(2018, 12, 12, 10, 0, 6, 234560)],
                [7.369678748917421, d(2018, 12, 12, 10, 0, 6, 456123)],
                [0.733422581157493, d(2018, 12, 12, 10, 0, 6, 773456)],
                [7.224979889168392, d(2018, 12, 12, 10, 0, 7, 45)],  # sec 7
                [5.266608936176866, d(2018, 12, 12, 10, 0, 7, 235456)],
                [4.375877754220355, d(2018, 12, 12, 10, 0, 7, 593456)],
                [5.002531618410650, d(2018, 12, 12, 10, 0, 7, 779456)],
                [8.854158957762145, d(2018, 12, 12, 10, 0, 8, 32)],  # sec 8
                [5.411904730089345, d(2018, 12, 12, 10, 0, 8, 234656)],
                [7.905003786418519, d(2018, 12, 12, 10, 0, 8, 475969)],
                [9.056773821927894, d(2018, 12, 12, 10, 0, 8, 746457)],
                [4.002719020670645, d(2018, 12, 12, 10, 0, 9, 48)],  # sec 9
                [5.844127071454221, d(2018, 12, 12, 10, 0, 9, 234561)],
                [4.240915080307066, d(2018, 12, 12, 10, 0, 9, 582821)],
                [8.375050195360474, d(2018, 12, 12, 10, 0, 9, 723845)],
                [4.316403796803029, d(2018, 12, 12, 10, 0, 10, 38)],  # sec 10
                [8.387578826577860, d(2018, 12, 12, 10, 0, 10, 223456)],
                [6.239062104467655, d(2018, 12, 12, 10, 0, 10, 592309)],
                [7.292221103401269, d(2018, 12, 12, 10, 0, 10, 723913)],
                [8.681559485663072, d(2018, 12, 12, 10, 0, 11, 69)],  # sec 11
                [2.023286283876424, d(2018, 12, 12, 10, 0, 11, 284839)],
                [7.194309428187285, d(2018, 12, 12, 10, 0, 11, 583283)],
                [0.455110541613195, d(2018, 12, 12, 10, 0, 11, 726329)],
                [5.582453028759810, d(2018, 12, 12, 10, 0, 12, 74)],  # sec 12
                [8.372387382405567, d(2018, 12, 12, 10, 0, 12, 234384)],
                [3.741095668585497, d(2018, 12, 12, 10, 0, 12, 527438)],
                [1.845529471653397, d(2018, 12, 12, 10, 0, 12, 736347)],
                [1.460867299398530, d(2018, 12, 12, 10, 0, 13, 56)],  # sec 13
                [6.236765218320047, d(2018, 12, 12, 10, 0, 13, 284584)],
                [8.856331823916857, d(2018, 12, 12, 10, 0, 13, 582832)],
                [6.801605601459279, d(2018, 12, 12, 10, 0, 13, 734642)],
                [9.180355981018705, d(2018, 12, 12, 10, 0, 14, 91)],  # sec 14
                [1.585285080531961, d(2018, 12, 12, 10, 0, 14, 294598)],
                [2.163440928208361, d(2018, 12, 12, 10, 0, 14, 592381)],
                [3.592080360442585, d(2018, 12, 12, 10, 0, 14, 732462)],
                [6.273212631347103, d(2018, 12, 12, 10, 0, 15, 12)],  # sec 15
                [2.877390672401549, d(2018, 12, 12, 10, 0, 15, 284394)],
                [1.036748362232061, d(2018, 12, 12, 10, 0, 15, 521384)],
                [5.619004246411306, d(2018, 12, 12, 10, 0, 15, 874329)],
                [5.862332426483674, d(2018, 12, 12, 10, 0, 16, 49)],  # sec 16
                [5.365554675312123, d(2018, 12, 12, 10, 0, 16, 294306)],
                [0.349672364034844, d(2018, 12, 12, 10, 0, 16, 592323)],
                [4.343214985798633, d(2018, 12, 12, 10, 0, 16, 723621)],
                [7.780001615814001, d(2018, 12, 12, 10, 0, 17, 76)],  # sec 17
                [4.586591354332886, d(2018, 12, 12, 10, 0, 17, 238438)],
                [2.518019128351807, d(2018, 12, 12, 10, 0, 17, 594322)],
                [0.813479150083747, d(2018, 12, 12, 10, 0, 17, 730456)],
                [7.014536121764342, d(2018, 12, 12, 10, 0, 18, 123)],  # sec 18
                [3.380102460068128, d(2018, 12, 12, 10, 0, 18, 239439)],
                [1.123922338940448, d(2018, 12, 12, 10, 0, 18, 502321)],
                [3.716489212847031, d(2018, 12, 12, 10, 0, 18, 723623)],
                [9.771117450637055, d(2018, 12, 12, 10, 0, 19, 87)],  # sec 19
                [2.134209415902749, d(2018, 12, 12, 10, 0, 19, 287438)],
                [0.671973723069304, d(2018, 12, 12, 10, 0, 19, 593282)]],
            columns=['magnitude', 'timestamp'])

        freq_windows = \
            fouriertransformation.from_df(data, window_size, frequency)
        self.assertEqual(len(freq_windows), 31)
        self.assertEqual(len(freq_windows[0].data), window_size)

    def test02(self):
        """Idea: Sampling frequency should be 2 Hz and the input data should
        span 20 seconds. The window size is 9 entries, so 4.5 seconds (due to
        the 2 Hz frequency).

        There is one gap --> two sub datasets

        Sub dataset 0:
            Windows start in the interval of 0 - 0 --> 1 window (a window
            starting at 0.5 would have to include the complete second 4, so up
            to 5.0)
        Sub dataset 1:
            Windows start in the interval of 11.000069 - 15.000069 --> 9
            windows (second 20 is not included in the data so a window at 15.5
            would go beyond the data)
        """
        frequency = 2  # Hz
        window_size = 9  # entries
        d = datetime
        data = pd.DataFrame([
                [0.233786601626025, d(2018, 12, 12, 10, 0, 0, 0)],
                [3.409165723372026, d(2018, 12, 12, 10, 0, 0, 200000)],
                [6.268553064538337, d(2018, 12, 12, 10, 0, 0, 512344)],
                [7.602477261931745, d(2018, 12, 12, 10, 0, 0, 654321)],
                [9.787878606529013, d(2018, 12, 12, 10, 0, 1, 0)],  # sec 1
                [8.410208406656857, d(2018, 12, 12, 10, 0, 1, 213455)],
                [3.990355668821168, d(2018, 12, 12, 10, 0, 1, 233455)],
                [3.773233503784786, d(2018, 12, 12, 10, 0, 1, 778901)],
                [5.714913485444301, d(2018, 12, 12, 10, 0, 2, 123456)],  # sec 2
                [5.237095585992316, d(2018, 12, 12, 10, 0, 2, 333334)],
                [5.237095585992316, d(2018, 12, 12, 10, 0, 2, 555555)],
                [1.110890279655918, d(2018, 12, 12, 10, 0, 2, 765456)],
                [6.774803540069895, d(2018, 12, 12, 10, 0, 2, 999999)],
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 250456)],  # sec 3
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 450456)],
                [5.109931127361341, d(2018, 12, 12, 10, 0, 3, 783456)],
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 12)],  # sec 4
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 128764)],
                [4.702826592756071, d(2018, 12, 12, 10, 0, 4, 513456)],
                [6.007462492855707, d(2018, 12, 12, 10, 0, 4, 813456)],
                [8.681559485663072, d(2018, 12, 12, 10, 0, 11, 69)],  # sec 11
                [2.023286283876424, d(2018, 12, 12, 10, 0, 11, 284839)],
                [7.194309428187285, d(2018, 12, 12, 10, 0, 11, 583283)],
                [0.455110541613195, d(2018, 12, 12, 10, 0, 11, 726329)],
                [5.582453028759810, d(2018, 12, 12, 10, 0, 12, 74)],  # sec 12
                [8.372387382405567, d(2018, 12, 12, 10, 0, 12, 234384)],
                [3.741095668585497, d(2018, 12, 12, 10, 0, 12, 527438)],
                [1.845529471653397, d(2018, 12, 12, 10, 0, 12, 736347)],
                [1.460867299398530, d(2018, 12, 12, 10, 0, 13, 56)],  # sec 13
                [6.236765218320047, d(2018, 12, 12, 10, 0, 13, 284584)],
                [8.856331823916857, d(2018, 12, 12, 10, 0, 13, 582832)],
                [6.801605601459279, d(2018, 12, 12, 10, 0, 13, 734642)],
                [9.180355981018705, d(2018, 12, 12, 10, 0, 14, 91)],  # sec 14
                [1.585285080531961, d(2018, 12, 12, 10, 0, 14, 294598)],
                [2.163440928208361, d(2018, 12, 12, 10, 0, 14, 592381)],
                [3.592080360442585, d(2018, 12, 12, 10, 0, 14, 732462)],
                [6.273212631347103, d(2018, 12, 12, 10, 0, 15, 12)],  # sec 15
                [2.877390672401549, d(2018, 12, 12, 10, 0, 15, 284394)],
                [1.036748362232061, d(2018, 12, 12, 10, 0, 15, 521384)],
                [5.619004246411306, d(2018, 12, 12, 10, 0, 15, 874329)],
                [5.862332426483674, d(2018, 12, 12, 10, 0, 16, 49)],  # sec 16
                [5.365554675312123, d(2018, 12, 12, 10, 0, 16, 294306)],
                [0.349672364034844, d(2018, 12, 12, 10, 0, 16, 592323)],
                [4.343214985798633, d(2018, 12, 12, 10, 0, 16, 723621)],
                [7.780001615814001, d(2018, 12, 12, 10, 0, 17, 76)],  # sec 17
                [4.586591354332886, d(2018, 12, 12, 10, 0, 17, 238438)],
                [2.518019128351807, d(2018, 12, 12, 10, 0, 17, 594322)],
                [0.813479150083747, d(2018, 12, 12, 10, 0, 17, 730456)],
                [7.014536121764342, d(2018, 12, 12, 10, 0, 18, 123)],  # sec 18
                [3.380102460068128, d(2018, 12, 12, 10, 0, 18, 239439)],
                [1.123922338940448, d(2018, 12, 12, 10, 0, 18, 502321)],
                [3.716489212847031, d(2018, 12, 12, 10, 0, 18, 723623)],
                [9.771117450637055, d(2018, 12, 12, 10, 0, 19, 87)],  # sec 19
                [2.134209415902749, d(2018, 12, 12, 10, 0, 19, 287438)],
                [0.671973723069304, d(2018, 12, 12, 10, 0, 19, 593282)]],
            columns=['magnitude', 'timestamp'])

        freq_windows = \
            fouriertransformation.from_df(data, window_size, frequency)
        self.assertEqual(len(freq_windows), 1+9)
        self.assertEqual(len(freq_windows[0].data), window_size)

    def test03(self):
        """Idea: Sampling frequency should be 2 Hz and the input data should
        span 20 seconds. The window size is 9 entries, so 4.5 seconds (due to
        the 2 Hz frequency).

        Windows start in the interval of 0 - 15.0 --> 31 windows (second 20 is
        not included in the data so a window at 15.5 would go beyond the data)
        """
        frequency = 2  # Hz
        window_size = 9  # entries
        d = datetime
        data = pd.DataFrame([
                [0.233786601626025, d(2018, 12, 12, 10, 0, 0, 0)],
                [9.787878606529013, d(2018, 12, 12, 10, 0, 1, 0)],  # sec 1
                [5.714913485444301, d(2018, 12, 12, 10, 0, 2, 123456)],  # sec 2
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 250456)],  # sec 3
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 12)],  # sec 4
                [8.528199089231283, d(2018, 12, 12, 10, 0, 5, 56)],  # sec 5
                [5.130572049165245, d(2018, 12, 12, 10, 0, 6, 23)],  # sec 6
                [7.224979889168392, d(2018, 12, 12, 10, 0, 7, 45)],  # sec 7
                [8.854158957762145, d(2018, 12, 12, 10, 0, 8, 32)],  # sec 8
                [4.002719020670645, d(2018, 12, 12, 10, 0, 9, 48)],  # sec 9
                [4.316403796803029, d(2018, 12, 12, 10, 0, 10, 38)],  # sec 10
                [8.681559485663072, d(2018, 12, 12, 10, 0, 11, 69)],  # sec 11
                [5.582453028759810, d(2018, 12, 12, 10, 0, 12, 74)],  # sec 12
                [1.460867299398530, d(2018, 12, 12, 10, 0, 13, 56)],  # sec 13
                [9.180355981018705, d(2018, 12, 12, 10, 0, 14, 91)],  # sec 14
                [6.273212631347103, d(2018, 12, 12, 10, 0, 15, 12)],  # sec 15
                [5.862332426483674, d(2018, 12, 12, 10, 0, 16, 49)],  # sec 16
                [7.780001615814001, d(2018, 12, 12, 10, 0, 17, 76)],  # sec 17
                [7.014536121764342, d(2018, 12, 12, 10, 0, 18, 123)],  # sec 18
                [9.771117450637055, d(2018, 12, 12, 10, 0, 19, 87)],  # sec 19
                [0.671973723069304, d(2018, 12, 12, 10, 0, 19, 593282)]],
            columns=['magnitude', 'timestamp'])

        freq_windows = \
            fouriertransformation.from_df(data, window_size, frequency)
        self.assertEqual(len(freq_windows), 31)
        self.assertEqual(len(freq_windows[0].data), window_size)

    def test04(self):
        """Idea: Sampling frequency should be 2 Hz and the input data should
        span 20 seconds. The window size is 9 entries, so 4.5 seconds (due to
        the 2 Hz frequency).

        There is one gap --> two sub datasets

        Sub dataset 0:
            Windows start in the interval of 0 - 0 --> 1 window (a window
            starting at 0.5 would have to include the complete second 4, so up
            to 5.0)
        Sub dataset 1:
            Windows start in the interval of 11.000069 - 15.000069 --> 9
            windows (second 20 is not included in the data so a window at 15.5
            would go beyond the data)
        """
        frequency = 2  # Hz
        window_size = 9  # entries
        d = datetime
        data = pd.DataFrame([
                [0.233786601626025, d(2018, 12, 12, 10, 0, 0, 0)],
                [9.787878606529013, d(2018, 12, 12, 10, 0, 1, 0)],  # sec 1
                [5.714913485444301, d(2018, 12, 12, 10, 0, 2, 123456)],  # sec 2
                [3.268673778493704, d(2018, 12, 12, 10, 0, 3, 250456)],  # sec 3
                [0.439445247045491, d(2018, 12, 12, 10, 0, 4, 12)],  # sec 4
                [6.007462492855707, d(2018, 12, 12, 10, 0, 4, 813456)],
                [8.681559485663072, d(2018, 12, 12, 10, 0, 11, 69)],  # sec 11
                [5.582453028759810, d(2018, 12, 12, 10, 0, 12, 74)],  # sec 12
                [1.460867299398530, d(2018, 12, 12, 10, 0, 13, 56)],  # sec 13
                [9.180355981018705, d(2018, 12, 12, 10, 0, 14, 91)],  # sec 14
                [6.273212631347103, d(2018, 12, 12, 10, 0, 15, 12)],  # sec 15
                [5.862332426483674, d(2018, 12, 12, 10, 0, 16, 49)],  # sec 16
                [7.780001615814001, d(2018, 12, 12, 10, 0, 17, 76)],  # sec 17
                [7.014536121764342, d(2018, 12, 12, 10, 0, 18, 123)],  # sec 18
                [9.771117450637055, d(2018, 12, 12, 10, 0, 19, 87)],  # sec 19
                [0.671973723069304, d(2018, 12, 12, 10, 0, 19, 593282)]],
            columns=['magnitude', 'timestamp'])

        freq_windows = \
            fouriertransformation.from_df(data, window_size, frequency)
        self.assertEqual(len(freq_windows), 1+9)
        self.assertEqual(len(freq_windows[0].data), window_size)
